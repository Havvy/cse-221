<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: GNU GPL 2.0
   - 
   - The contents of this file are subject to the
   - GNU General Public License Version 2.0; you may not use this file except
   - in compliance with the License. You may obtain a copy of the License at
   - http://www.gnu.org/licenses/gpl.html
   - 
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="data:text/css,

#code { 
	background-color: white;
	font-family: monospace;
	/*	-moz-tab-size: 4; */
}

" type="text/css"?>

<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<script type="text/javascript"><![CDATA[

function Trace() window.console && window.console.debug.apply(this, arguments);

function Stack() { try { throw Error() } catch (ex) { return 'stack:\n'+String(ex.stack).split('\n').slice(2).join('\n') }}        		

function $(id) document.getElementById(id);

function Strdup(s, n) {

	for ( var res = ''; n--;  res += s );
	return res;
}

function LTrim(str) str.substr(str.search(/\S/));


function IsNotEmpty(obj) {

	for ( var tmp in obj )
		return true;
	return false;
}

function QueryPrivilege() {

	netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
	netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
}

function CallWithPrivilege( privilege, fct ) {

	netscape.security.PrivilegeManager.enablePrivilege(privilege);
	try {
		var ret = fct.apply(this, arguments);
	} catch(ex) {}
	netscape.security.PrivilegeManager.revertPrivilege(privilege);
	return ret;
}

function CopyToClipboard(text) {

	var str = Components.classes['@mozilla.org/supports-string;1'].createInstance(Components.interfaces.nsISupportsString);
	str.data = text;
	var trans = Components.classes['@mozilla.org/widget/transferable;1'].createInstance(Components.interfaces.nsITransferable);
	trans.addDataFlavor('text/unicode');
	trans.setTransferData('text/unicode', str, text.length*2);
	var clip = Components.classes['@mozilla.org/widget/clipboard;1'].createInstance(Components.interfaces.nsIClipboard);
	clip.emptyClipboard(clip.kGlobalClipboard);
	clip.setData(trans, null, clip.kGlobalClipboard);
}

function GetFromClipboard() {

	var clip = Components.classes['@mozilla.org/widget/clipboard;1'].createInstance(Components.interfaces.nsIClipboard);
	var trans = Components.classes['@mozilla.org/widget/transferable;1'].createInstance(Components.interfaces.nsITransferable);
	trans.addDataFlavor("text/unicode");
	clip.getData(trans, clip.kGlobalClipboard);
	var str = {}, strLength = {};
	trans.getTransferData("text/unicode", str, strLength);
	str = str.value.QueryInterface(Components.interfaces.nsISupportsString);
	return str.data.substring(0,strLength.value / 2);
}

function RemoteMessageClient(ip, port) {

	var _this = this;
	var requestList = [], xhrPool = [], xhrMax = 2;
	for ( var i = 0; i < xhrMax; i++ )
		xhrPool.push(new XMLHttpRequest());

	this.Send = function Send(message) {

		requestList.push(message);
		if ( xhrPool.length >= 1 ) {

			var xhr = xhrPool.shift();
			netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead'); // allow cross-domain xhr
			xhr.open('POST', 'http://'+ip+':'+port+'/', true);
			xhr.onreadystatechange = function() {

				if ( xhr.readyState != 4 )
					return;
				var res = xhr.responseText;
				xhrPool.push(xhr);
				if ( xhr.status == 200 && res && _this.onMessage )
					_this.onMessage(res);
				if ( requestList.length || xhrPool.length == xhrMax )
					Send(requestList.pop());
			}
			xhr.send(requestList.shift());
			netscape.security.PrivilegeManager.revertPrivilege('UniversalBrowserRead');
		}
	}
	this.Send();
}

function RemoteCall( remoteMessage ) {

	var _this = this;
	this.__noSuchMethod__ = function() {

		remoteMessage.Send(uneval(Array.slice(arguments)));
	}

	remoteMessage.onMessage = function( message ) {

		if ( !message )
			return;
		var call = eval('('+message+')');
		_this.api[call[0]].apply(_this.api, call[1]);
	}
}

// tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// application		
		
		function CodeEditor(editorElement) {
			
			var _this = this;
			
			function Changed() {

				_this.onChange && _this.onChange();
			}
			
			this.Focus = function() {
				
				var textarea = document.getAnonymousNodes(editorElement)[0].firstChild;
				textarea.focus();
			}
			
			this.InsertCode = function(code) {
				
				var textarea = document.getAnonymousNodes(editorElement)[0].firstChild;
				var value = editorElement.value;
				var lineCount = 0;
				for ( var pos = 0; (pos = value.indexOf('\n', pos)) != -1; pos++, lineCount++ );
				var lineHeight = textarea.scrollHeight / lineCount;
				var scrollY = textarea.scrollTop;
				var start = editorElement.selectionStart;
				var end = editorElement.selectionEnd;
				editorElement.value = code + value;
				textarea.scrollTop = scrollY+lineHeight;
				start += code.length;
				end += code.length;
				editorElement.selectionStart = start;
				editorElement.selectionEnd = end;
			}

			this.GetCode = function() {
				
				return editorElement.value;
			}
			
			editorElement.addEventListener('keydown', function(ev) {

				var elt = ev.target;
				var val = elt.value;
				var start = elt.selectionStart;
				var end = elt.selectionEnd;
				switch ( ev.keyCode ) {
				case 9:
					if ( start == end ) {
						
						val = val.substr(0, start) + '\t' + val.substr(end);
						start++;
						end = start;
					} else {

						var tmp = [ '\t'+line for each ( line in val.substr(start, end).split('\n') ) ].join('\n');
						val = val.substr(0, start) + tmp + val.substr(end);
						end = start + tmp.length;
					}
					break;
				case 13:
					if ( start == end ) {

						var pos = val.lastIndexOf( '\n', start - 1 ) + 1;
						var pad = '\n';
						for ( var i = pos; val[i] == ' ' || val[i] == '\t'; i++ )
							pad += val[i];
						val = val.substr(0, start) + pad + val.substr(end);
						start += pad.length;
						end = start;
					}
					break;
				default:
					return;
				}				
				ev.preventDefault();
//				ev.stopPropagation();
				elt.value = val;
				elt.selectionStart = start;
				elt.selectionEnd = end;
				
				Changed();
			}, true);

			editorElement.addEventListener('input', function(ev) {
				
				Changed();
			}, false);
		}
		
		
		function ControllerManager(container) {
			
			var _this = this;
			var _parser = new DOMParser();
			function XULToNode(xulString) {

				var doc = _parser.parseFromString('<dummy xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml">'+xulString+'</dummy>', 'text/xml').documentElement;
				if ( doc.tagName == 'parsererror' )
					throw('Parsing Error');
				return window.document.importNode(doc, true).firstChild;
			}
			
			var controlerList, updatedValues, autoNames, uibox, box;

			function SetDefault(options, def) {
				
				options = options || {};
				for ( p in def )
					if ( !(p in options) )
						options[p] = def[p];
				return options;
			}

			function CreateName() {
				
				return '$'+(++autoNames).toString(36);
			}
			
			function Changing(name) {
			
				updatedValues[name] = controlerList[name];
				_this.onChange && _this.onChange(name);
			}

			function DefineAccess(name, getter, setter) {
			
				controlerList.__defineGetter__(name, getter);
				controlerList.__defineSetter__(name, setter);
			}

			this.GetNames = function() {
				
				return [ name for ( name in controlerList ) ];
			}
			
			this.GetModifiedState = function() {

				var tmp = updatedValues;
				updatedValues = {};
				return tmp;
			}
			
			this.GetState = function() {
				
				var state = {};
				for ( name in controlerList )
					state[name] = controlerList[name];
				return state;
			}
			
			this.SetState = function( state ) {
			
				for ( name in state )
					if ( name in controlerList )
						controlerList[name] = state[name];
			}

			this.SetUserInterface = function(code) {
				
				controlerList = {};
				updatedValues = {};
				autoNames = 0;
			
				uibox = document.createElement('vbox');
				box = XULToNode('<hbox style="padding: 4px"/>');
				uibox.appendChild(box);
				try {
					
					with(uiApi) eval(code);
					$('uierrors').firstChild.data = '';
				} catch(ex) {
					
					$('uierrors').firstChild.data = ex;
				}
				
				if ( container.firstChild )
					container.replaceChild(uibox, container.firstChild);
				else
					container.appendChild(uibox);
			}

			var uiApi = {
				get br() {

					box = XULToNode('<hbox style="padding: 4px"/>');
					uibox.appendChild(box);
				},
				get hr() {

					box = XULToNode('<hbox style="padding: 4px;border-top: 2px groove white"/>');
					uibox.appendChild(box);
				},
				get space() {

					box.appendChild(XULToNode('<hbox width="30"/>'));
				},
				get spacer() {

					box.appendChild(XULToNode('<spacer flex="1"/>'));
				},
				action:function(opt) {
				
				},
				slider:function({min, max, step, w, vert, name}) {
					
					min = min || -1;
					max = max || 1;
					step = step || 0.1;
					w = w || '';
					vert = vert || false;
					name = name || CreateName();

//					opt = SetDefault(opt, { min:-1, max:1, step:0.1, w:'', vert:false, name:CreateName() });
					var ratio = 1 / step; // float support

					var orient = vert ? 'vertical' : 'horizontal';
					var xul = XULToNode('<vbox tooltiptext="'+name+'" align="center"><box orient="'+orient+'" align="center"><label value="'+min+'"/><scale orient="'+orient+'" '+(vert?'height="'+w+'"':'width="'+w+'"')+' min="'+min*ratio+'" max="'+max*ratio+'" increment="'+step*ratio+'" pageincrement="'+step*ratio*10+'"/><label value="'+max+'"/></box><label value="" style="color:gray"/></vbox>');
					var widget = xul.firstChild.firstChild.nextSibling;
					var label = xul.lastChild;

					widget.addEventListener('change', function() {
						
						value = widget.value/ratio;
						label.value = value;
						widget.setAttribute('tooltiptext', value);
						Changing(name);
					}, false);

					widget.addEventListener('DOMMouseScroll', function(ev) {
						
						// var mult = ev.shiftKey ? 100 : 1;
						if ( ev.detail > 0 ) // ev.detail / 3 * mult
							widget.decrease();
						else
							widget.increase();
					}, false);

					widget.addEventListener('click', function(ev) {

						if ( ev.button != 2 )
							return;
						controlerList[opt.name] = (opt.max-opt.min)/2 + opt.min;
						ev.preventDefault();
						ev.stopPropagation();
					}, false);

					DefineAccess(opt.name,
						function() parseInt(widget.getAttribute('value'))/ratio,
						function(val) {
							
							widget.setAttribute('value', val*ratio);
							label.setAttribute('value', val.toFixed(1));
						}
					);
					box.appendChild(xul);
				},
				button:function(opt) {

					opt = SetDefault(opt, { name:CreateName(), def:false });
					opt = SetDefault(opt, { text:opt.name });
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'"><button type="checkbox" label="'+opt.text+'"/></vbox>');
					var widget = xul.firstChild;
					widget.addEventListener('command', function() {

						Changing(opt.name);
					}, false);
					DefineAccess(opt.name,
						function() widget.getAttribute('checked') == 'true',
						function(val) {
							
							if ( val )
								widget.setAttribute('checked', 'true');
							else
								widget.removeAttribute('checked');
						}
					);
					box.appendChild(xul);
				},
				check:function(opt) {

					opt = SetDefault(opt, { name:CreateName(), def:false });
					opt = SetDefault(opt, { text:opt.name });
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'"><checkbox label="'+opt.text+'" width="'+opt.width+'"/></vbox>');
					var widget = xul.firstChild;
					widget.addEventListener('command', function() {

						widget.setAttribute('tooltiptext', opt.name+'='+widget.checked);
						Changing(opt.name);
					}, false);
					DefineAccess(opt.name,
						function() widget.getAttribute('checked') == 'true',
						function(val) {
						
							if ( val )
								widget.setAttribute('checked', 'true');
							else
								widget.removeAttribute('checked');
						}
					);
					box.appendChild(xul);
				},
				field:function(opt) {

					opt = SetDefault(opt, { w:'', lines:1, num:false, name:CreateName(), def:'' }); 
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'" width="'+opt.w+'"><textbox '+(opt.num ? 'type="number" min="-Infinity" max="Infinity"' : '' )+' multiline="'+(opt.lines>1)+'" rows="'+opt.lines+'"/></vbox>');
					var widget = xul.firstChild;
					widget.emptyText = opt.name + ' ?';
					widget.addEventListener('input', function() {

						widget.setAttribute('tooltiptext', opt.name+'='+widget.value);
						Changing(opt.name);
					}, false);
					DefineAccess(opt.name,
						function() widget.value, // widget.getAttribute('value'),
						function(val) {
						
							widget.value = val; // widget.setAttribute('value', val);
						}
					);
					box.appendChild(xul);
				},
				label:function(opt) {

					opt = SetDefault(opt, { name:CreateName(), def:'' }); 
					opt = SetDefault(opt, { text:opt.name });
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'"><hbox><label value="'+opt.text+'"/><label/></hbox></vbox>');
					var widget = xul.firstChild.firstChild.nextSibling;
					DefineAccess(opt.name,
						function() widget.getAttribute('value'),
						function(val) {
						
							widget.setAttribute('value', val);
						}
					);
					box.appendChild(xul);
				},
				color:function(opt) {

					opt = SetDefault(opt, { name:CreateName(), def:'#777777' });
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'"><colorpicker type="button"/></vbox>');
					var widget = xul.firstChild;
					widget.addEventListener('select', function() {

						widget.setAttribute('tooltiptext', opt.name+'='+widget.color);
						Changing(opt.name);
					}, false);
					DefineAccess(opt.name,
						function() widget.getAttribute('color')+'FF',
						function(val) {
						
							widget.setAttribute('color',val);
						}
					);
					box.appendChild(xul);
				},
				radio:function(opt) {

					opt = SetDefault(opt, { ro:false, name:CreateName(), num:false, values:'1,2,3,4', def:0 });
					opt = SetDefault(opt, { def:opt.values[0] });
					if ( typeof(opt.values) == 'string' )
						opt.values = opt.values.split(',');
					var xul = XULToNode('<radiogroup tooltiptext="'+opt.name+'">'+['<radio label="'+name+'" value="'+name+'"/>' for each (name in opt.values)].join('')+'</radiogroup>');
					var widget = xul;
					widget.addEventListener('select', function() {

						Changing(opt.name);
					}, false);
					DefineAccess(opt.name,
						function() opt.num ? widget.selectedIndex : widget.getAttribute('value'),
						function(val) {
						
							if (opt.num)
								widget.selectedIndex = val;
							else 
								widget.value = val;//widget.setAttribute('value', val);
						}
					);
					box.appendChild(xul);
				},
				image:function(opt) {

					opt = SetDefault(opt, { w:'', h:'', name:CreateName(), def:'' });
					var xul = XULToNode('<vbox><image width="'+opt.w+'" height="'+opt.h+'" src=""/></vbox>');
					var img = xul.firstChild;
					DefineAccess(opt.name,
						function() img.getAttribute('src').substr(5),
						function(val) {

							img.setAttribute('src', 'data:'+val); // image/gif;base64,...
						}
					);
					box.appendChild(xul);
				},
				area:function(opt) {

					opt = SetDefault(opt, { w:100, h:100, name:CreateName(), def:[0,0,0] });
					var xul = XULToNode('<vbox tooltiptext="'+opt.name+'" style="-moz-user-focus: normal"><canvas xmlns="http://www.w3.org/1999/xhtml" width="'+opt.w+'" height="'+opt.h+'" style="border: 1px solid gray"/><label value=""/></vbox>');
					var canvas = xul.firstChild;
					var label = xul.firstChild.nextSibling;

					var ctx = canvas.getContext('2d');
					var w = canvas.width, h = canvas.height;

					var x=0, y=0, z=0;
					var draw = false;

					function UpdateView() {

						label.setAttribute('value', x.toFixed(1)+' , '+y.toFixed(1)+' , '+z.toFixed(1));

						ctx.clearRect(0, 0, w, h);

						if ( draw ) {

							var c = Math.floor(z/2+0.5);
							ctx.fillStyle = '#'+(0x10000ff+c*0xff0000).toString(16).substr(1,6);
						} else {

							ctx.fillStyle = 'black';
						}

						var px = (x/2+0.5)*w;
						var py = (y/2+0.5)*h;
						ctx.fillRect(0,py,w,1);
						ctx.fillRect(px,0,1,h);
					}

					canvas.addEventListener('mousedown', function(ev) { draw = !draw; UpdateView() }, true);

					if ( opt.reset )
						canvas.addEventListener('mouseup' , function(ev) { draw = false; x=0; y=0; z=0; Changing(opt.name); UpdateView() }, true);

					canvas.addEventListener('mousemove', function(ev) {

						if ( !draw )
							return;
						var px = ev.layerX - canvas.parentNode.boxObject.x;
						var py = ev.layerY - canvas.parentNode.boxObject.y;
						x = (px/w - 0.5) * 2;
						y = (py/h - 0.5) * 2;
						UpdateView();
						Changing(opt.name);
					}, false);

					canvas.addEventListener('DOMMouseScroll', function(ev) {

						if ( !draw )
							return;
						z += -ev.detail / 30;
						UpdateView();
						Changing(opt.name);
					}, false);

					DefineAccess(opt.name,
						function() [x,y,z],
						function(val) {
							[x,y,z] = val;
							UpdateView();
						}
					);
					box.appendChild(xul);
				},
			}
		}

		var controllerManager;
		var ce;
		var rc;
		
		function init() {
			
			QueryPrivilege();

			ce = new CodeEditor($('code'));
			ce.Focus();
			controllerManager = new ControllerManager($('ui'));

			var rmc = new RemoteMessageClient('127.0.0.1', 8007);
			rc = new RemoteCall(rmc);
			rc.api = {

				SetUserInterface: function(uiCode) {
					
					controllerManager.SetUserInterface(uiCode);
					rc.WatchVariables(controllerManager.GetNames());
				},
				
				SetVariables: function(variables) {
					
					controllerManager.SetState(variables);
				},
				
				ReportError: function(message) {
				
					$('codeerrors').firstChild.data = message;
				},
			}
			
			var sendCodeTimeout;
			function SendCode() {

				$('codeerrors').firstChild.data = '';
				$('codetx').style.visibility = 'visible';
				rc.SetCode(ce.GetCode());
				setTimeout(function() { $('codetx').style.visibility = 'hidden' }, 50);
			}
			
			ce.onChange = function() {
				
				clearTimeout(sendCodeTimeout);
				sendCodeTimeout = setTimeout(SendCode, 200);
			}

			var sendVarTimeout;
			function SendVar() {

				var modifiedState = controllerManager.GetModifiedState();
				if ( IsNotEmpty(modifiedState) ) {
					
					$('uitx').style.visibility = 'visible';
					rc.SetVariables(modifiedState);
					setTimeout(function() { $('uitx').style.visibility = 'hidden' }, 50);
				}
				sendVarTimeout = undefined;
			}
			
			controllerManager.onChange = function() {
				
				if ( !sendVarTimeout )
					SendVar();
				clearTimeout(sendVarTimeout);
				sendVarTimeout = setTimeout(SendVar, 100);
			}
		}
		
		function OnCopy() {
			
			CallWithPrivilege('UniversalXPConnect', function() CopyToClipboard(uneval(controllerManager.GetState())));
		}
		
		function OnPaste() {
		
			controllerManager.SetState(eval(CallWithPrivilege('UniversalXPConnect', function() GetFromClipboard())));
		}
		
		function OnSave() {
			
			ce.InsertCode('/*init "NAME", '+uneval(controllerManager.GetState())+' */\n');
			rc.SetCode(ce.GetCode());
		}
		
		function OnInit() {
			
			rc.Init()
		}
		
	]]></script>

	<hbox flex="1">
		<vbox flex="1">
			<stack allowevents="true" flex="1">
				<textbox id="code" multiline="true" wrap="off" flex="1" class="plain" spellcheck="false"/>
				<vbox mousethrough="always" align="end">
					<image id="codetx" style="visibility: hidden; list-style-image: url(chrome://global/skin/icons/find.png); -moz-image-region: rect(0px 32px 16px 16px);"/>
				</vbox>
			</stack>
			<splitter collapse="before" resizeafter="farthest"/>
			<description id="codeerrors" style="color: red; font-weight: bold"> </description>
		</vbox>
		<splitter collapse="before" resizeafter="farthest">
			<grippy/>
		</splitter>
		<vbox context="uiContextMenu">
			<menupopup id="uiContextMenu">
				<menuitem label="Copy" oncommand="OnCopy()"/>
				<menuitem label="Paste" oncommand="OnPaste()"/>
				<menuitem label="Save" oncommand="OnSave()"/>
				<menuitem label="Init" oncommand="OnInit()"/>
			</menupopup>
			<stack allowevents="true" flex="1">
				<vbox id="ui" flex="1"/>
				<vbox mousethrough="always" align="end">
					<image id="uitx" style="visibility: hidden; list-style-image: url(chrome://global/skin/icons/find.png); -moz-image-region: rect(0px 32px 16px 16px);"/>
				</vbox>
			</stack>
			<splitter collapse="before" resizeafter="farthest"/>
			<description id="uierrors" style="color: red; font-weight: bold"> </description>
		</vbox>
	</hbox>
</window>

<!--
	$1 = 'image/gif;base64,R0lGODdhMAAwAPAAAAAAAP///ywAAAAAMAAwAAAC8IyPqcvt3wCcDkiLc7C0qwyGHhSWpjQu5yqmCYsapyuvUUlvONmOZtfzgFzByTB10QgxOR0TqBQejhRNzOfkVJ+5YiUqrXF5Y5lKh/DeuNcP5yLWGsEbtLiOSpa/TPg7JpJHxyendzWTBfX0cxOnKPjgBzi4diinWGdkF8kjdfnycQZXZeYGejmJlZeGl9i2icVqaNVailT6F5iJ90m6mvuTS4OK05M0vDk0Q4XUtwvKOzrcd3iq9uisF81M1OIcR7lEewwcLp7tuNNkM3uNna3F2JQFo97Vriy/Xl4/f1cf5VWzXyym7PHhhx4dbgYKAAA7';
-->
