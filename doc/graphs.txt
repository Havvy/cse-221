Graph/Node/Edge Readme

--Public Interface--

Graph:
	construction:
		Create an array of Nodes and extend it with Graph.

		myGraph = [new Node(undefined, undefined, "A"),
							 new Node(undefined, undefined, "B"),
							 new Node(undefined, undefined, "C")]
		extend(myGraph, Graph);

	nodes():
		Gives the array of Nodes without the methods.

	(Psuedocode)
	explore: function (myWeight, myPath, paths, unvisited) {
		for each edge {
			if (the destination has been seen) {
				compare the weight of its path to the weight of adding myPath to edge.
				if (current weight is higher) {
					replace the destination with below.
				} else {
					ignore it.
				}
			} else (the destination has not been seen) {
				add the destination to the list of paths, with a weight of
					my current weight (since my current weight is the shortest
					weight from the initial node) to the weight of the edge and
					a path of the path to me plus the edge.
			}
		}
	}

Edge:
	construction:
		myEdge = new Edge(fromNode, toNode, weights);

		weights can be any object. fromNode and toNode must both be Nodes.

		Edge probably shouldn't be used.

Node:
	construction:
		myNode = new Node({adjacent : [[node1, weights1], [node2, weights2], ... [node^N, weights^N]],
											 data : {},
											 name: "NAME"
                      });

	accessors:
		A node acts as a hashmap by using get() and set().
		get:
			myNode.get(key);
		set:
			myNode.set(key, value);
		name:
			myNode.name();

			Equivalent to myNode.get("name");
		adjacents:
			myNode.adjacents();
				Returns an array of adjacent nodes.

	mutators:
		Adding edges:
			addCyclicEdge(node, weights);
			addAcyclicEdge(node, weights);
			addEdge(node, weights, acyclic?);
				addEdge(node, weights) is equivalent to addCyclicEdge(node, weights);
				addEdge(node, weights, true) is equivalent to addAcyclicEdge(node, weights);
		